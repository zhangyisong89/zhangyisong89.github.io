{"pages":[{"title":"About","date":"2019-01-19T14:53:45.551Z","path":"about/index.html","text":""},{"title":"Categories","date":"2019-01-19T14:53:45.553Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2019-01-19T17:42:37.302Z","path":"tags/index.html","text":""}],"posts":[{"title":"个人博客网站初衷","date":"2019-01-19T16:17:59.000Z","path":"wiki/个人博客网站/","text":"个人博客网站初衷记录可以将自己工作学习过程中遇到的问题记录来。 共享将自己遇到的问题以及解决思路共享给大家，为大家提供参考，同时也希望和大家相同交流沟通。 便捷知识库可以实时阅读修改，实现公司和家里的无缝切换。 个人博客网站搭建个人博客网站通过Github page + Hexo + Atom来搭建。 总体参考如下文章：12Github Pages(一)：一个最基础的个人网站https://www.jianshu.com/p/f82c76b90336 Github page适合您和您的项目的网站, 从头开始构建您自己的站点或为您的项目生成一个站点。详细Github page Hexo博客网站（静态网站）构建工具，通过命令来创建网站。详细内容请阅读另一篇博文“博客网站工具-Hexo”或者如下文章12使用Hexo博客生成工具https://hans2936.github.io/2018/06/06/HexoLog/ Atom网站Markdown文章编辑器，Atom内可以直接打开终端来执行Hexo指令非常方便。 Atom安装插件缓慢解决方法123Atom在系统下安装activate-power-mode插件问题？设置系统环境变量，在cmd命令下执行。或者手动设置ATOM_NODE_URLATOM_NODE_URL=http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist Atom安装platformio-ide-terminal终端插件12windows请问atom可以打开控制台吗？https://atom-china.org/t/windows-atom/3203/3 主题一开始采用landscape主题，之后采用Wikitten，有关Wikitten的详细说明","tags":[],"categories":[]},{"title":"本地仓库与远程仓库","date":"2019-01-19T16:17:59.000Z","path":"wiki/版本管理/Git/本地仓库与远程仓库/","text":"123参考链接git clone，push，pull，fetch命令详解。https://blog.csdn.net/u012575819/article/details/50553501 Git本地与远程git clone远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。1$ git clone &lt;版本库的网址&gt; 该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。1$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt; git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。1234567$ git clone http[s]://example.com/path/to/repo.git/$ git clone ssh://example.com/path/to/repo.git/$ git clone git://example.com/path/to/repo.git/$ git clone /opt/git/project.git$ git clone file:///opt/git/project.git$ git clone ftp[s]://example.com/path/to/repo.git/$ git clone rsync://example.com/path/to/repo.git/ 通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。 git remote为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。 不带选项的时候，git remote命令列出所有远程主机。12$ git remoteorigin 使用-v选项，可以参看远程主机的网址。123$ git remote -vorigin git@github.com:jquery/jquery.git (fetch)origin git@github.com:jquery/jquery.git (push) 上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。 克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。123$ git clone -o jQuery https://github.com/jquery/jquery.git$ git remotejQuery 上面命令表示，克隆的时候，指定远程主机叫做jQuery。 git remote show命令加上主机名，可以查看该主机的详细信息。1$ git remote show &lt;主机名&gt; git remote add命令用于添加远程主机。1$ git remote add &lt;主机名&gt; &lt;网址&gt; git remote rm命令用于删除远程主机。1$ git remote rm &lt;主机名&gt; git remote rename命令用于远程主机的改名。1$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt; git fetch一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。1$ git fetch &lt;远程主机名&gt; 上面命令将某个远程主机的更新，全部取回本地。 git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。 默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。1$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; 比如，取回origin主机的master分支。1$ git fetch origin master 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。 git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。123456$ git branch -rorigin/master$ git branch -a* master remotes/origin/master 上面命令表示，本地主机的当前分支是master，远程分支是origin/master。 取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。1$ git checkout -b newBrach origin/master 上面命令表示，在origin/master的基础上，创建一个新分支。 此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。123$ git merge origin/master# 或者$ git rebase origin/master 上面命令表示在当前分支上，合并origin/master。 git pullgit pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。1$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。1$ git pull origin next 上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。12$ git fetch origin$ git merge origin/next 在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。 Git也允许手动建立追踪关系。1git branch --set-upstream master origin/next 上面命令指定master分支追踪origin/next分支。 如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。1$ git pull origin 如果当前分支只有一个追踪分支，连远程主机名都可以省略。1$ git pull 上面命令表示，当前分支自动与唯一一个追踪分支进行合并。 如果合并需要采用rebase模式，可以使用–rebase选项。1$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。 但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。1234$ git pull -p# 等同于下面的命令$ git fetch --prune origin$ git fetch -p git pushgit push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。1$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; 注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。 如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。1$ git push origin master 上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。123$ git push origin :master# 等同于$ git push origin --delete master 上面命令表示删除origin主机的master分支。 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。1$ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。 如果当前分支只有一个追踪分支，那么主机名都可以省略。1$ git push 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。1$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。123$ git config --global push.default matching# 或者$ git config --global push.default simple 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。1$ git push --all origin 上面命令表示，将所有本地分支都推送到origin主机。 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。1$ git push --force origin 上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。 最后，git push不会推送标签（tag），除非使用–tags选项。1$ git push origin --tags 代码更新基本上顺序是这样的： 1.修改好了代码先要提交到本地仓库（该仓库与远程仓库相关联）1git commit -am “commit message&quot; 2.然后有两种方法来把你的代码和远程仓库中的代码合并 git pull这样就直接把你本地仓库中的代码进行更新但问题是可能会有冲突(conflicts)，个人不推荐 先git fetch origin（把远程仓库中origin最新代码取回），再git merge origin/master（把本地代码和已取得的远程仓库最新代码合并），如果你的改动和远程仓库中最新代码有冲突，会提示，再去一个一个解决冲突，最后再从1开始 3.如果没有冲突，git push origin master，把你的改动推送到远程仓库中 详细说明","tags":[],"categories":[{"name":"版本管理","slug":"版本管理","permalink":"https://zhangyisong89.github.io/categories/版本管理/"},{"name":"Git","slug":"版本管理/Git","permalink":"https://zhangyisong89.github.io/categories/版本管理/Git/"}]},{"title":"Hello World","date":"2019-01-19T08:00:49.528Z","path":"wiki/博客网站工具-Hexo/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]}]}